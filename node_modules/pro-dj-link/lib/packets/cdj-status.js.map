{"version":3,"file":"cdj-status.js","sourceRoot":"","sources":["../../src/packets/cdj-status.ts"],"names":[],"mappings":";;AAAA,4CAA6C;AAE7C,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC;IACvB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CACnE,CAAC,CAAC;AASU,QAAA,WAAW,GAAG,CAAC,IAAY,EAAY,EAAE,CAAC,CAAC;IACpD,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,yBAAa,CAAC,IAAI,CAAC;IACtC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,yBAAa,CAAC,IAAI,CAAC;IACnC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,yBAAa,CAAC,MAAM,CAAC;IACvC,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,yBAAa,CAAC,KAAK,CAAC;CACxC,CAAC,CAAC;AAaU,QAAA,IAAI,GAAG,CAAC,MAAc,EAAW,EAAE,CAC5C,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAErC,QAAA,KAAK,GAAG,CAAC,MAAc,EAAa,EAAE;IAC/C,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAC5B,MAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACjD,MAAM,KAAK,GAAG,mBAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACxC,MAAM,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACvC,MAAM,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACrC,MAAM,OAAO,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,SAAS,CAAC;IAC1C,OAAO;QACH,MAAM;QACN,IAAI;QACJ,KAAK;QACL,KAAK,EAAE;YACH,KAAK;YACL,GAAG;YACH,OAAO;SACV;KACJ,CAAC;AACN,CAAC,CAAC","sourcesContent":["import { CDJStateFlags } from '../constants';\n\nconst header = Buffer.from([\n    0x51, 0x73, 0x70, 0x74, 0x31, 0x57, 0x6d, 0x4a, 0x4f, 0x4c, 0x0a\n]);\n\nexport interface CDJState {\n    playing: boolean;\n    sync: boolean;\n    master: boolean;\n    onAir: boolean;\n}\n\nexport const mapCdjState = (flag: number): CDJState => ({\n    playing: !!(flag & CDJStateFlags.Play),\n    sync: !!(flag & CDJStateFlags.Sync),\n    master: !!(flag & CDJStateFlags.Master),\n    onAir: !!(flag & CDJStateFlags.OnAir)\n});\n\nexport interface CDJStatus {\n    name: string;\n    device: number;\n    state: CDJState;\n    speed: {\n        pitch: number;\n        bpm: number;\n        current: number;\n    }\n}\n\nexport const test = (buffer: Buffer): boolean =>\n    buffer.slice(0, header.length).equals(header);\n\nexport const parse = (buffer: Buffer): CDJStatus => {\n    const device = buffer[0x21];\n    const name = buffer.toString('utf8', 0x0b, 0x1e);\n    const state = mapCdjState(buffer[0x89]);\n    const pitch = buffer.readInt32BE(0x8c);\n    const bpm = buffer.readInt16BE(0x92);\n    const current = (bpm * pitch) / 0x6400000;\n    return {\n        device,\n        name,\n        state,\n        speed: {\n            pitch,\n            bpm,\n            current\n        }\n    };\n};"]}