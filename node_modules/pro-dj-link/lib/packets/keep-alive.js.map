{"version":3,"file":"keep-alive.js","sourceRoot":"","sources":["../../src/packets/keep-alive.ts"],"names":[],"mappings":";;AAAA,4CAAiD;AACjD,2BAA8B;AAC9B,6CAAuC;AAU1B,QAAA,IAAI,GAAG,CAAC,MAAc,EAAW,EAAE,CAC5C,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,6BAAiB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,6BAAiB,CAAC;IACnE,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC;AAE3B;;;GAGG;AACH,MAAM,KAAK,GAAG,CAAC,MAAc,EAAW,EAAE,CACtC,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC;AAEnD,MAAM,aAAa,GAAG,CAAC,MAAc,EAAU,EAAE,CAC7C,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAExC,MAAM,eAAe,GAAG,CAAC,MAAc,EAAU,EAAE,CAC/C,MAAM,CAAC,IAAI,CAAC,CAAC;AAEjB,MAAM,YAAY,GAAG,CAAC,MAAc,EAAU,EAAE,CAC5C,sBAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAE3B,MAAM,WAAW,GAAG,CAAC,MAAc,EAAU,EAAE,CAAC,aAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;AAEtE,QAAA,KAAK,GAAG,CAAC,MAAc,EAAuB,EAAE;IACzD,IAAI,CAAC,YAAI,CAAC,MAAM,CAAC,EAAE;QACf,MAAM,IAAI,mBAAmB,EAAE,CAAC;KACnC;IACD,OAAO;QACH,IAAI,EAAE,aAAa,CAAC,MAAM,CAAC;QAC3B,MAAM,EAAE,eAAe,CAAC,MAAM,CAAC;QAC/B,GAAG,EAAE,YAAY,CAAC,MAAM,CAAC;QACzB,EAAE,EAAE,WAAW,CAAC,MAAM,CAAC;QACvB,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO;KACxC,CAAC;AACN,CAAC,CAAC;AAEF,yBAAiC,SAAQ,KAAK;IAC1C;QACI,KAAK,CAAC,0BAA0B,CAAC,CAAC;IACtC,CAAC;CACJ;AAJD,kDAIC","sourcesContent":["import { KEEP_ALIVE_HEADER } from '../constants';\nimport { fromLong } from 'ip';\nimport {Â toString } from 'mac-address';\n\nexport interface CDJKeepAlivePackage {\n    name: string;\n    device: number;\n    mac: string;\n    ip: string;\n    type: 'CDJ' | 'Mixer';\n}\n\nexport const test = (buffer: Buffer): boolean =>\n    buffer.slice(0, KEEP_ALIVE_HEADER.length).equals(KEEP_ALIVE_HEADER) &&\n    buffer.length === 0x36;\n\n/**\n * 0x01 == CDJ\n * 0x02 == Mixer\n */\nconst isCdj = (buffer: Buffer): boolean =>\n    buffer[0x34] === 0x01 && buffer[0x25] === 0x01;\n\nconst getDeviceName = (buffer: Buffer): string =>\n    buffer.toString('utf8', 0x0b, 0x20);\n\nconst getDeviceNumber = (buffer: Buffer): number =>\n    buffer[0x24];\n\nconst getDeviceMac = (buffer: Buffer): string =>\n    toString(buffer, 0x26);\n\nconst getDeviceIp = (buffer: Buffer): string => fromLong(buffer.readInt32BE(0x2c));\n\nexport const parse = (buffer: Buffer): CDJKeepAlivePackage => {\n    if (!test(buffer)) {\n        throw new InvalidPacketHeader();\n    }\n    return {\n        name: getDeviceName(buffer),\n        device: getDeviceNumber(buffer),\n        mac: getDeviceMac(buffer),\n        ip: getDeviceIp(buffer),\n        type: isCdj(buffer) ? 'CDJ' : 'Mixer'\n    };\n};\n\nexport class InvalidPacketHeader extends Error {\n    constructor() {\n        super('Unexpected Packet Header');\n    }\n}"]}