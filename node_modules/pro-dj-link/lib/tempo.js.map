{"version":3,"file":"tempo.js","sourceRoot":"","sources":["../src/tempo.ts"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,+BAAmD;AACnD,iCAAqC;AACrC,2CAA2C;AAE3C,MAAM,CAAC,GAAG,KAAK,CAAC,iBAAiB,CAAC,CAAC;AACnC,MAAM,IAAI,GAA4B,IAAI,sBAAe,CAAC,CAAC,CAAC,CAAC;AAEhD,QAAA,KAAK,GAAG,GAAG,EAAE;IACtB,CAAC,CAAC,uBAAuB,CAAC,CAAC;IAC3B,MAAM,MAAM,GAAG,oBAAY,CAAC;QACxB,IAAI,EAAE,MAAM;QACZ,SAAS,EAAE,IAAI;KAClB,CAAC,CAAC;IACH,MAAM,CAAC,IAAI,CAAC;QACR,IAAI,EAAE,KAAK;KACd,EAAE,GAAG,EAAE;QACJ,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC1B,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,IAAY,EAAE,EAAE;QAClC,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,gBAAgB;YACrC,MAAM,EACF,MAAM,EACN,IAAI,EACJ,KAAK,EACR,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACvB,CAAC,CAAC,UAAU,MAAM,KAAK,IAAI,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAClE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACjB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC5B;aAAM;YACH,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;SACjC;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEW,QAAA,GAAG,GAAuB,IAAI,CAAC,YAAY,EAAE,CAAC","sourcesContent":["import * as debug from 'debug';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { createSocket } from 'dgram';\nimport * as timing from './packets/timing';\n\nconst d = debug('pro-dj-link:bpm');\nconst _bpm: BehaviorSubject<number> = new BehaviorSubject(0);\n\nexport const track = () => {\n    d('Starting BPM Tracking');\n    const socket = createSocket({\n        type: 'udp4',\n        reuseAddr: true\n    });\n    socket.bind({\n        port: 50001\n    }, () => {\n        socket.setBroadcast(true);\n        socket.setMulticastTTL(128);\n    });\n    socket.on('message', (data: Buffer) => {\n        if (timing.test(data)) { // Timing Packet\n            const {\n                device,\n                name,\n                speed\n            } = timing.parse(data);\n            d(`Player ${device} (${name}): ${Math.round(speed.current)} BPM`);\n            d(speed.current);\n            _bpm.next(speed.current);\n        } else {\n            d('50001', data.length, data);\n        }\n    });\n};\n\nexport const bpm: Observable<number> = _bpm.asObservable();"]}