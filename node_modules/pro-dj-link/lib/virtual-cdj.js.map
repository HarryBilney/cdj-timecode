{"version":3,"file":"virtual-cdj.js","sourceRoot":"","sources":["../src/virtual-cdj.ts"],"names":[],"mappings":"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","sourcesContent":["import { createSocket } from 'dgram';\nimport { networkInterfaces } from 'os';\nimport { subnet, toLong } from 'ip';\nimport * as mixerStatus from './packets/mixer-status';\nimport * as cdjStatus from './packets/cdj-status';\nimport { CDJState } from './packets/cdj-status';\nimport * as debug from 'debug';\nimport { ANNOUNCEMENT_PORT, KEEP_ALIVE_HEADER } from './constants';\nimport { toBuffer } from 'mac-address';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nconst d = debug('pro-dj-link:virtual-cdj');\n\nexport interface DeviceStatus {\n    name: string;\n    device: number;\n    state: CDJState;\n    speed: {\n        pitch: number;\n        bpm: number;\n        current: number;\n    }\n}\n\nexport class VirtualCdj {\n    private broadcast: string;\n    private mac: string;\n    private ip: string;\n    private socket;\n\n    private _bpm: BehaviorSubject<number> = new BehaviorSubject(0);\n    private _devices: BehaviorSubject<DeviceStatus[]> = new BehaviorSubject([]);\n\n    constructor(networkDevice: string, private device: number = 0x05) {\n        const interfaces = networkInterfaces();\n        const addresses = interfaces[networkDevice];\n        if (!addresses) {\n            throw new Error('Invalid Network Device');\n        }\n        const [addr] = addresses\n            .filter(({ family }) => family === 'IPv4');\n        if (!addr) {\n            throw new Error('Invalid Network Device');\n        }\n        const { broadcastAddress } = subnet(addr.address, addr.netmask);\n        this.broadcast = broadcastAddress;\n        this.mac = addr.mac;\n        this.ip = addr.address;\n        this.socket = createSocket('udp4');\n\n        this.socket.on('message', (data, remote) => {\n            if (mixerStatus.test(data)) {\n                const status = mixerStatus.parse(data);\n                d(`Mixer Status ${status.device} (${status.name})`);\n            } else if (cdjStatus.test(data)) {\n                const status = cdjStatus.parse(data);\n                d(`CDJ Status ${status.device} (${status.name})`);\n                if (status.state.master) {\n                    this._bpm.next(status.speed.current);\n                }\n                const current = this._devices.getValue()\n                    .filter(({ device }) => device !== status.device);\n                this._devices.next([...current, status]);\n            } else {\n                d(data);\n            }\n        });\n        this.socket.on('error', err => {\n            console.error(err);\n            this.socket.close();\n        });\n        this.socket.on('listening', () => {\n            this.socket.setBroadcast(true);\n            this.socket.setMulticastTTL(128);\n            setInterval(this.keepalive, 1500);\n            const { address, port } = this.socket.address();\n            d(`Virtual CDJ Running on ${address}:${port}`);\n        });\n        this.socket.bind({\n            port: 50002\n        });\n    }\n\n    private keepalive = () => {\n        const name = Buffer.alloc(0x14);\n        name.write('Virtual CDJ');\n        const mac = toBuffer(this.mac);\n        const ip = Buffer.alloc(4);\n        ip.writeUInt32BE(toLong(this.ip), 0);\n        const a = Buffer.from([\n            0x01, 0x02, 0x00, 0x36, this.device, 0x01,\n        ]);\n        const b = Buffer.from([\n            0x01, 0x00, 0x00, 0x00, 0x01, 0x00\n        ]);\n        const packet = Buffer.concat([\n            KEEP_ALIVE_HEADER,\n            name,\n            a,\n            mac,\n            ip,\n            b\n        ]);\n        this.socket.send(packet, ANNOUNCEMENT_PORT, this.broadcast, err => {\n            if (err) {\n                console.error(err);\n            }\n            d('Send Keep Alive Packet');\n        });\n    };\n\n    get devices(): Observable<DeviceStatus[]> {\n        return this._devices.asObservable();\n    }\n\n    get bpm(): Observable<number> {\n        return this._bpm.asObservable();\n    }\n}"]}